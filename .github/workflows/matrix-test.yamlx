name: Debug Build & Tests

on:
  push:
    branches: [ main ]
  pull_request: 
    branches: [ main ]

jobs:
  build:
    runs-on: "${{ matrix.os }}-latest"
    strategy:
      matrix:
        os: [ windows ]
        compiler: [ msvc, mingw, clang ]
        include:
          - os: ubuntu
            compiler: ''
          - os: macos
            compiler: ''

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Setup CMake & Ninja
        uses: lukka/get-cmake@latest

      - name: Install Dependencies
        if: ${{ matrix.os == 'ubuntu' }}
        uses: awalsh128/cache-apt-pkgs-action@latest
        with:
          packages: libwayland-dev libxkbcommon-dev xorg-dev xvfb

      - if: matrix.os == 'windows'
        uses: ssciwr/setup-mesa-dist-win@v2

      - if: matrix.compiler == 'mingw'
        uses: egor-tensin/setup-mingw@v2
        with:
          cc: 0
          static: 0

      - if: matrix.compiler == 'clang'
        uses: egor-tensin/setup-clang@v1
        with:
          cc: 0

      - name: Add Virtual Display
        if: matrix.os == 'ubuntu'
        run: "Xvfb :99 -screen 0 1920x1080x24 &"

      - name: Fix GLFW Bug
        if: matrix.os == 'macos'
        run: |
         sed -i '' 's/[[:space:]]*ADD_ATTRIB(NSOpenGLPFAAccelerated);[[:space:]]*/ADD_ATTRIB(NSOpenGLPFARendererID);ADD_ATTRIB(kCGLRendererGenericFloatID);/' \
         "${{github.workspace}}/vendor/glfw/src/nsgl_context.m"

      - name: Setup MinGW
        id: setup_mingw
        if: matrix.compiler == 'mingw'
        uses: egor-tensin/setup-mingw@v2
        with:
          cc: 0
          static: 0

      - name: Setup Clang
        id: setup_clang
        if: matrix.compiler == 'clang'
        uses: egor-tensin/setup-clang@v1
        with:
          cc: 0

      - name: Configure CMake
        if: matrix.compiler == 'msvc'
        run: cmake --preset=test
      - if: matrix.os != 'windows' || matrix.compiler == 'mingw'
        run: cmake --preset=test -G Ninja
      - if: matrix.compiler == 'clang'
        run: cmake --preset=test -G Ninja -D CMAKE_C_COMPILER=clang -D CMAKE_CXX_COMPILER=clang++

      - name: Build
        if: matrix.os == 'windows'
        run: cmake --build --preset=debug -j "$env:NUMBER_OF_PROCESSORS"
      - if: matrix.os != 'windows'
        run: cmake --build --preset=debug

      - name: Test
        if: matrix.os == 'ubuntu'
        working-directory: ${{github.workspace}}/build/debug
        run: "DISPLAY=:99 ctest --extra-verbose -C Debug -L CLI"
      - if: matrix.os != 'ubuntu'
        working-directory: ${{github.workspace}}/build/debug
        run: ctest --extra-verbose -C Debug -L CLI
