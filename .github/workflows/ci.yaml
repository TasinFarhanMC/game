name: Compile Binaries

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false

      matrix:
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
            build_type: Release
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
            build_type: Release

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Set reusable strings
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"
        echo "bin-dir=${{ github.workspace }}/bin" >> "$GITHUB_OUTPUT"

    - name: Dependencies Linux
      if: ${{ matrix.os == 'ubuntu-latest' }}
      uses: awalsh128/cache-apt-pkgs-action@latest
      with:
        packages: libwayland-dev libxkbcommon-dev xorg-dev xvfb

    - name: Configure CMake
      run: >
        cmake -B ${{ steps.strings.outputs['build-output-dir'] }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -DCMAKE_RUNTIME_OUTPUT_DIRECTORY=${{ steps.strings.outputs['bin-dir'] }}
        -S ${{ github.workspace }}

    - name: Build
      run: cmake --build ${{ steps.strings.outputs['build-output-dir'] }} --config ${{ matrix.build_type }}

    - name: Copy Assets Unix
      shell: bash
      run: |
        mkdir -p "${{ steps.strings.outputs['bin-dir'] }}/assets"
        cp -r "${{ github.workspace }}/assets/"* "${{ steps.strings.outputs['bin-dir'] }}/assets/"
      if: runner.os != 'Windows'

    - name: Copy Assets Windows
      shell: pwsh
      run: |
        New-Item -ItemType Directory -Force -Path "${{ steps.strings.outputs['bin-dir'] }}\Release\assets"
        Copy-Item -Path "${{ github.workspace }}\assets\*" -Destination "${{ steps.strings.outputs['bin-dir'] }}\Release\assets" -Recurse -Force
      if: runner.os == 'Windows'

    - name: Upload Artifacts Unix
      uses: actions/upload-artifact@v4
      with:
        name: binaries-${{ matrix.os }}-${{ matrix.c_compiler }}
        path: ${{ steps.strings.outputs['bin-dir'] }}
      if: runner.os != 'Windows'

    - name: Upload Artifacts Windows
      uses: actions/upload-artifact@v4
      with:
        name: binaries-${{ matrix.os }}-${{ matrix.c_compiler }}
        path: ${{ steps.strings.outputs['bin-dir'] }}\Release
      if: runner.os == 'Windows'
